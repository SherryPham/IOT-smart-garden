
# Created by Tran Anh Thu Pham
# Created on 8/10/2024
# ClientSignal.py

# pip install "paho-mqtt<2.0.0"

import paho.mqtt.client as mqtt     # client library for MQTT
import time                         # time handling
import random                       # generating random numbers
import json                         # working with JSON data

# Define the broker address and credentials for connecting to the MQTT broker
broker = 'rule28.i4t.swin.edu.au'
user_information = {
    "client_identifier": "My Garden (Publisher)",
    "username": "<103818400>",
    "password": "<103818400>"
}
watering = False

topic = [("public/#", 0), ("public/<103818400>/soil moisture/control", 0)]
publish_topic = "public/<103818400>/soil moisture/status"

# Defines the connection settings for the MQTT client
def connect_mqtt() -> mqtt.Client:
    global broker, user_information, topic

    def on_connect(client, userdata, flags, rc):
        if rc == 0:
            print("Connected to Centralize Communication Hub!. Code: " + str(rc))

        else:
            print("Failed to connect, return code " + rc)
    
    # client = mqtt.Client(user_information["client_identifier"])
    # client = mqtt.Client(user_information["client_identifier"], mqtt.CallbackAPIVersion.VERSION2)
    client = mqtt.Client(client_id=user_information["client_identifier"], protocol=mqtt.MQTTv311)
    
    # provide authentication
    client.username_pw_set(
        user_information["username"], user_information["password"])
    client.on_connect = on_connect
    client.connect(broker)
    return client

# Logs MQTT activity for debugging purposes, printing any logs generated by the client
def __showLog(client: mqtt.Client) -> None:
    def on_log(client, userdata, level, buf):
        print(f"Logs: {str(buf)}")
    client.on_log = on_log

# Subscribing to Topics
def subscribe(client: mqtt.Client) -> None:
    def on_message(client, userdata, msg):
        global watering

        print("\n\n***********************SUBSCRIBE***********************")
        __showLog(client)
        print(f"Topic: {msg.topic}")
        print(f"Payload: {msg.payload.decode('utf-8')}")
        print(f"QoS: {msg.qos}")
        print(f"Retain: {msg.retain}")
        print("***********************SUBSCRIBE***********************\n\n")
        if msg.payload.decode("utf-8").lower() == "on":
            watering = True
        if msg.payload.decode("utf8").lower() == "off":
            watering = False

    client.on_message = on_message
    client.subscribe(topic)

# Publishing Messages
def publish(client: mqtt.Client) -> None:
    global topic, user_information
    message_count = 1
    moisture_level = 20

    def on_publish(client, userdata, mid):
        print(f"Payload published: {str(mid)}")
    client.on_publish = on_publish

    # A loop runs to simulate the soil moisture control:
    while True:
        __showLog(client)

        # If will_turn_on is True, the soil moisture level increases, simulating the watering being on
        if watering:
            moisture_level += 1
            info = {
                "moisture level": moisture_level,
                "is watering": "Yes"
            }

        # If will_turn_on is True, the soil moisture level decreases, simulating the watering being off
        if not watering:
            moisture_level -= 1
            info = {
                "moisture level": moisture_level,
                "is watering": "No"
            }

        # sends moisture level and watering status to the topic publish_topic as a JSON object every 2 seconds
        time.sleep(2)
        res = client.publish(publish_topic, json.dumps(info), 0)
        status = res[0]
        if status == 0:
            print(f"Send moisturization status to {topic}")
        else:
            print(f"Failed to send message to {topic}")

# Handling disconnection and prints the reason for disconnection
def __disconnect(client: mqtt.Client):
    def on_disconnect(client, userdata, rc):
        print(f"Disconnected from server with reason: {str(rc)}")
    client.on_disconnect = on_disconnect
    client.disconnect()

# connecting to the broker, subscribing to topics, and entering a loop that continuously publishes the fanâ€™s status
def main() -> None:
    client = connect_mqtt()
    try:
        subscribe(client)
        client.loop_start()
        publish(client)

    # If pressing Ctrl+C  
    except KeyboardInterrupt:
        __disconnect(client)
        client.loop_stop()


if __name__ == "__main__":
    main()
